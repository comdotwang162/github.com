package org.zttc.itat.test;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.Test;
import org.zttc.itat.model.Special;
import org.zttc.itat.model.Student;
import org.zttc.itat.util.HibernateUtil;

public class TestFetch {
	@Test
	public void test01() {
		Session session = null;
		try {
			session = HibernateUtil.openSession();
			/**
			 * 对于Annotation的配置而言，默认就是基于join的抓取的，所以只会发出一条SQL
			 */
			Student stu = (Student)session.load(Student.class, 1);
			System.out.println(stu.getName()+","+stu.getClassroom().getName()+","+stu.getClassroom().getSpecial().getName());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			HibernateUtil.close(session);
		}
	}
	
	@Test
	public void test02() {
		Session session = null;
		try {
			session = HibernateUtil.openSession();
			/**
			 * 由于基于Annotation的配置没有延迟加载，此时会把所有的关联对象查询上来，发大量的SQL语句
			 */
			List<Student> stus = session.createQuery("from Student").list();
			for(Student stu:stus) {
				System.out.println(stu.getName()+","+stu.getClassroom());
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			HibernateUtil.close(session);
		}
	}
	
	@Test
	public void test04() {
		Session session = null;
		try {
			session = HibernateUtil.openSession();
			/**
			 * 在XML中配置了fetch=join仅仅只是对load的对象有用，对HQL中查询的对象无用，
			 * 所以此时会发出查询班级的SQL，解决的这个SQL的问题有两种方案，
			 * 一种是设置对象的抓取的batch-size
			 * 另一种方案在HQL中使用fecth来指定抓取
			 * 特别注意，如果使用了join fetch就无法使用count(*)
			 */
			List<Student> stus = session.createQuery("select stu from " +
					"Student stu join fetch stu.classroom").list();
			for(Student stu:stus) {
				System.out.println(stu.getName()+","+stu.getClassroom());
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			HibernateUtil.close(session);
		}
	}
}
